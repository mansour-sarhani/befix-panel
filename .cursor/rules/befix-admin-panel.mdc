---
alwaysApply: true
---

# BeFix Admin Panel - Cursor AI Rules

## Project Overview
This is an admin panel application built with Next.js 16 (App Router), React 19, Tailwind CSS v4, Formik, Yup, Axios, and Redux Toolkit. Features include dark mode, hybrid state management, and comprehensive UI components.

## Tech Stack
- **Framework:** Next.js 16.0.1 (App Router)
- **UI Library:** React 19.2.0
- **Styling:** Tailwind CSS v4 + CSS Custom Properties (pure CSS approach)
- **State Management:** Redux Toolkit + React Context (hybrid approach)
- **Form Management:** Formik with Yup validation
- **HTTP Client:** Axios
- **Notifications:** Sonner (modern toast notifications)
- **Icons:** Lucide React (1000+ tree-shakeable icons)
- **Linting:** ESLint 9 (flat config) + Prettier
- **Optimization:** React Compiler enabled

## Code Style & Conventions

### General
- Use functional components with hooks (no class components)
- Prefer named exports for components, utilities, and services
- Use arrow functions for component definitions
- Keep components small and focused (single responsibility)
- Use meaningful, descriptive names (avoid abbreviations unless standard)

### File Naming
- Components: PascalCase (e.g., `UserTable.js`, `DashboardLayout.js`)
- Utilities/Hooks: camelCase (e.g., `useAuth.js`, `formatDate.js`)
- API routes: lowercase with hyphens (e.g., `api/user-management/route.js`)
- Page files: lowercase (e.g., `page.js`, `layout.js`, `loading.js`, `error.js`)

### Component Structure
- Organize components in feature-based folders under `src/components/`
- Keep page components minimal - delegate logic to feature components
- Structure: imports → constants → component → exports
- Co-locate related files (Component.js, Component.module.css if needed)

### Component Imports (CRITICAL)

**⚠️ IMPORTANT: All custom components use NAMED EXPORTS, not default exports!**

Always import custom components with curly braces `{}`:

```javascript
// ✅ CORRECT - Named imports
import { Button } from '@/components/common/Button';
import { Card } from '@/components/common/Card';
import { Badge } from '@/components/common/Badge';
import { Modal } from '@/components/common/Modal';
import { Loader } from '@/components/common/Loader';
import { Skeleton } from '@/components/common/Skeleton';
import { Pagination } from '@/components/common/Pagination';
import { InputField } from '@/components/forms/InputField';
import { SelectField } from '@/components/forms/SelectField';
import { Table, TableHeader, TableRow, TableCell } from '@/components/tables';

// ❌ WRONG - Default imports (will cause errors)
import Button from '@/components/common/Button';
import Card from '@/components/common/Card';
```

**Exception:** Page components and external libraries use default exports:
```javascript
// Default exports (correct)
export default function UsersPage() { ... }  // Page components
import Link from 'next/link';                // Next.js components
import Image from 'next/image';              // Next.js components
```

**Quick Reference - Import Patterns:**
- **Common components** (`src/components/common/`): Named exports `{ Component }`
- **Form components** (`src/components/forms/`): Named exports `{ Component }`
- **Table components** (`src/components/tables/`): Named exports `{ Component }`
- **Layout components** (`src/components/layout/`): Named exports `{ Component }`
- **Services** (`src/services/`): Named exports `{ serviceName }`
- **Utilities** (`src/lib/`, `src/hooks/`): Named exports `{ utilityName }`
- **Schemas** (`src/schemas/`): Named exports `{ schemaName }`
- **Redux slices** (`src/features/`): Named exports for actions/selectors, default for reducer
- **Page components** (`src/app/`): Default exports
- **External libraries**: Follow library's export pattern (check docs)

### Table Components Usage (CRITICAL)

**⚠️ IMPORTANT: Use the correct table component for each purpose!**

Our table components have specific roles:

```javascript
// ✅ CORRECT Table Structure
import { Table, TableHeader, TableHeaderCell, TableRow, TableCell, TableActions } from '@/components/tables';

<Table>
    <TableHeader>                    {/* Renders <thead> wrapper */}
        <TableRow>                   {/* Renders <tr> inside thead */}
            <TableHeaderCell>Name</TableHeaderCell>         {/* Renders <th> */}
            <TableHeaderCell>Email</TableHeaderCell>        {/* Renders <th> */}
            <TableHeaderCell align="right">Actions</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <tbody>                          {/* Manual <tbody> wrapper */}
        {data.map((item) => (
            <TableRow key={item.id}>  {/* Renders <tr> inside tbody */}
                <TableCell>{item.name}</TableCell>          {/* Renders <td> */}
                <TableCell>{item.email}</TableCell>         {/* Renders <td> */}
                <TableCell align="right">
                    <TableActions 
                        onView={...} 
                        onEdit={...} 
                        onDelete={...} 
                    />
                </TableCell>
            </TableRow>
        ))}
    </tbody>
</Table>

// ❌ WRONG - Don't use TableHeader for individual columns
<Table>
    <thead>
        <TableRow>
            <TableHeader>Name</TableHeader>  {/* This renders <thead>, not <th>! */}
        </TableRow>
    </thead>
</Table>

// ❌ WRONG - Don't manually add <thead> when using TableHeader
<Table>
    <thead>                          {/* Double <thead> nesting! */}
        <TableHeader>                {/* This also renders <thead> */}
            <TableRow>...</TableRow>
        </TableHeader>
    </thead>
</Table>
```

**Component Reference:**
- `Table` - Wraps the entire table with responsive container
- `TableHeader` - Renders `<thead>` wrapper for header section
- `TableHeaderCell` - Renders `<th>` for individual column headers (supports sorting)
- `TableRow` - Renders `<tr>` for table rows
- `TableCell` - Renders `<td>` for table data cells
- `TableActions` - Pre-built action buttons (view, edit, delete)

### React Best Practices
- Avoid unnecessary useEffect - leverage React Compiler optimizations
- Use Server Components by default, add 'use client' only when needed
- Client Components required for: Redux, Context, event handlers, browser APIs
- Implement proper error boundaries (error.js files) for resilient UX
- Use Suspense boundaries (loading.js files) for async operations
- Avoid prop drilling - use Redux for data, Context for simple global state

### Next.js 16 Specific
- Use route groups: `(auth)` for login, `(dashboard)` for protected routes
- Create loading.js files at each route level for loading states
- Create error.js files at each route level for error boundaries
- Use not-found.js for custom 404 pages
- Use RouteGuard component instead of middleware for JWT auth in localStorage
- Server Components for initial data fetch, dispatch to Redux on client

**Dynamic Route Parameters (CRITICAL):**
- In Next.js 16 App Router, `params` are now **async** and must be **awaited**
- This applies to both page components and API routes

```javascript
// ✅ CORRECT - Page components (await params)
export default async function UserPage({ params }) {
    const { id } = await params;  // Must await!
    // ... rest of component
}

// ✅ CORRECT - API routes (await params)
export async function GET(request, { params }) {
    const { id } = await params;  // Must await!
    // ... rest of handler
}

// ❌ WRONG - Not awaiting params (will cause errors)
export async function GET(request, { params }) {
    const { id } = params;  // Missing await!
    // This will fail in Next.js 16
}
```

**For Client Components:**
Use the `use()` hook to unwrap params:
```javascript
'use client';
import { use } from 'react';

export default function EditPage({ params }) {
    const unwrappedParams = use(params);
    const { id } = unwrappedParams;
    // ... rest of component
}
```

### State Management (Hybrid Approach)

**Use Redux Toolkit for:**
- Business data (users, companies, transactions, packages, payments, promotions)
- Complex UI state (filters, pagination, sorting)
- Data that needs to be shared across many components
- State that benefits from time-travel debugging

**Use React Context for:**
- Authentication state (AuthContext: user, token, login/logout)
- Theme preference (ThemeContext: light/dark mode)
- Simple global state that rarely changes

**Other State:**
- Keep form state local with Formik
- Use URL state (searchParams) for shareable filters/pagination
- Prefer Server Components for initial data fetching

**Redux Guidelines:**
- Use `createAsyncThunk` for all API calls
- Use `createSlice` for feature state (one slice per feature)
- Import pre-typed hooks: `useAppDispatch`, `useAppSelector`
- Slices located in `src/features/[feature]/[feature]Slice.js`
- All slices registered in `src/lib/store.js`

### Forms with Formik & Yup
- Always validate with Yup schemas
- Create reusable field components (InputField, SelectField, etc.)
- Handle loading and error states consistently
- Use Formik's `touched` and `errors` for validation feedback
- Implement proper form reset after successful submission

### API Integration with Axios
- Centralize Axios configuration in `src/lib/axios.js`
- Create API service functions in `src/services/` organized by feature
- Implement interceptors for auth tokens and error handling
- Use proper error handling with try-catch blocks
- Return consistent response structures from API functions
- Handle loading and error states in UI components

### Styling with Tailwind CSS v4 + Pure CSS

**IMPORTANT: Tailwind CSS v4 is NOT compatible with SASS preprocessors. We use pure CSS only.**

**Tailwind CSS v4:**
- Follow mobile-first responsive design
- Use Tailwind utility classes as primary styling method
- Import in CSS files only: `@import "tailwindcss";`
- Leverage Tailwind v4's native CSS features
- Maintain consistent spacing scale (gap-4, p-6, etc.)

**CSS Custom Properties (for theming):**
- **ALWAYS use CSS variables for colors:** `var(--color-background)`, `var(--color-text-primary)`
- **NEVER hard-code colors:** Avoid `#ffffff`, `#000000` in components
- All theme variables defined in `src/app/globals.css`
- Available variables: `--color-primary`, `--color-success`, `--color-error`, `--color-background`, `--color-text-primary`, `--color-border`, etc.
- This ensures automatic dark mode support

**Dark Mode:**
- All components automatically support dark mode via CSS variables
- Theme toggled via `[data-theme="dark"]` attribute on `<html>`
- Use ThemeContext and ThemeToggle component
- System preference fallback via `@media (prefers-color-scheme: dark)`
- Test all components in both light and dark modes

**Note:** SASS files (`variables.scss`, `mixins.scss`) are kept for reference but NOT imported in global styles to avoid conflicts with Tailwind v4.

### ESLint & Code Quality
- Fix all ESLint errors before committing
- Run `npm run lint:fix` to auto-fix issues
- No console.logs in production code (use proper logging)
- Remove unused imports and variables
- Follow Next.js ESLint rules strictly

### Admin Panel Specific

**Authentication:**
- JWT tokens stored in localStorage
- AuthContext for auth state management
- RouteGuard component for client-side route protection
- Redirect to `/login` if not authenticated
- Mock admin user: `admin@befix.com` / `Admin@123`

**Data Tables:**
- Custom table components (Table, TableHeader, TableRow, TableCell)
- Support sorting, filtering, pagination
- Loading skeletons while fetching data
- Empty states for no data scenarios

**Forms:**
- Formik + Yup for all forms
- Reusable field components (InputField, SelectField, etc.)
- Consistent validation and error display
- Loading states on submit

**Notifications:**
- Use Sonner for toast notifications
- Success/error/info toasts for user feedback
- Import from `sonner` package

**Navigation:**
- Sidebar with collapsible menu
- Active state indicators
- Mobile-responsive (hamburger menu)
- Icons from Lucide React

**Dark Mode:**
- ThemeToggle in Header component
- All components support both themes via CSS variables
- User preference persisted to localStorage

### Performance
- Leverage React Server Components for data fetching
- Use Next.js Image component for all images
- Implement pagination for large datasets
- Use dynamic imports for heavy components
- Optimize bundle size (check with `npm run build`)

### Error Handling
- Always handle API errors gracefully
- Provide user-friendly error messages
- Implement global error boundary
- Log errors appropriately for debugging
- Show fallback UI for failed components

### Security
- Never expose API keys or secrets in client code
- Validate all user inputs (client and server side)
- Implement CSRF protection for mutations
- Sanitize data before rendering
- Use environment variables for configuration

### File Organization

src/
├── app/                        # Next.js App Router pages
│   ├── (auth)/                # Auth route group (login, etc.)
│   ├── (dashboard)/           # Dashboard route group (protected routes)
│   ├── layout.js              # Root layout with providers
│   ├── loading.js             # Root loading state
│   ├── error.js               # Root error boundary
│   ├── not-found.js           # Custom 404 page
│   └── globals.css            # Tailwind v4 import + CSS custom properties
├── components/                 # Reusable UI components
│   ├── common/                # Buttons, Cards, Loader, Skeleton, ThemeToggle, etc.
│   ├── forms/                 # Form field components (Formik integrated)
│   ├── tables/                # Table components (custom built)
│   └── layout/                # Layout components (Sidebar, Header, BottomNav, MainLayout, ContentWrapper)
├── features/                   # Redux slices (feature-based)
│   ├── users/                 # User feature
│   │   └── usersSlice.js     # Redux slice for users
│   ├── companies/
│   ├── transactions/
│   ├── packages/
│   ├── payments/
│   └── promotions/
├── services/                   # API service layer
│   ├── api/                   # Real API calls
│   ├── mock/                  # Mock data for development
│   └── [feature].service.js  # Service functions per feature
├── lib/                        # Utilities, helpers, configs
│   ├── store.js               # Redux store configuration
│   ├── StoreProvider.js       # Redux Provider (client component)
│   ├── hooks.js               # Pre-typed Redux hooks
│   └── axios.js               # Axios configuration
├── contexts/                   # React Context providers
│   ├── AuthContext.js         # Authentication context
│   └── ThemeContext.js        # Theme (light/dark) context
├── hooks/                      # Custom React hooks
├── styles/                     # Legacy SASS files (for reference only, NOT imported)
│   ├── variables.scss         # Reference: Theme variables
│   └── mixins.scss            # Reference: Reusable SASS mixins
├── schemas/                    # Yup validation schemas
└── constants/                  # App constants and configs


### Comments & Documentation
- Write self-documenting code (clear names > comments)
- Add JSDoc comments for complex functions
- Document non-obvious business logic
- Keep comments concise and up-to-date
- Add TODO comments for future improvements

### Git Workflow
- Write clear, descriptive commit messages
- Keep commits focused and atomic
- Test before committing
- Run linter before pushing

### Redux Toolkit Patterns
- Use `createAsyncThunk` for all API calls
- Use `createSlice` for state management
- Follow the pattern in `src/features/users/usersSlice.js`
- Each feature gets: list, loading, error, filters, pagination state
- Thunks call service layer functions (e.g., `userService.getUsers()`)
- Use `useAppDispatch` and `useAppSelector` hooks (not plain Redux hooks)

### Component Patterns
- **Server Components:** Default for pages, static content
- **Client Components ('use client'):** Required for Redux, Context, interactivity
- **Providers order:** ThemeProvider → AuthProvider → StoreProvider → App content
- **Loading states:** Use Skeleton components, not just spinners
- **Error states:** User-friendly messages with recovery options

## AI Assistant Guidelines
- Suggest modern, performant solutions
- Prioritize readability and maintainability
- Follow the established patterns in the codebase
- **ALWAYS use CSS custom properties for colors (never hard-code)**
- **Use Redux for business data, Context for auth/theme only**
- Ask for clarification when requirements are ambiguous
- Provide explanations for non-trivial code
- Consider accessibility in UI components
- Suggest improvements proactively but respect user decisions
- Reference documentation: IMPLEMENTATION_PLAN.md, REDUX_GUIDE.md, DARK_MODE_GUIDE.md